#! /usr/bin/env python
# -*- coding: utf-8 -*-
import os
import telebot
import time
from yahoofinancials import YahooFinancials
from selenium import webdriver
from TokenFile import token as TOKEN
import matplotlib.pyplot as plt
from PIL import Image

bot = telebot.TeleBot(token=TOKEN)
BATIN_ID = 57678862
MY_ID = 407742044
CHROME = (583, 1052)
PYCHARM = (894, 1053)
SEARCH_LINE = (895, 165)

# celebrated = False
# with open('celebrated.txt', 'r') as f:
#     if '0' in f.read():
#         bot.send_message(chat_id=BATIN_ID, text='–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!ü§ë')
#         bot.send_message(chat_id=MY_ID, text='–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!ü§ë')
#         celebrated = True
# if celebrated is True:
#     with open('celebrated.txt', 'w') as f:
#         f.write('1')

# with open('agents.txt') as f:
#     AGENTS = f.readlines()

stocks_that_are_already_sent = {}
with open('stocks_that_are_already_sent.txt', 'r') as f:
    sent_stocks = f.readlines()
    for sent_stock in sent_stocks:
        stocks_that_are_already_sent[sent_stock.split(' ')[0]] = sent_stock.split(' ')[1]


def GetHistoricalPrices(ticker_):
    yahoo_financials = YahooFinancials(ticker_)
    try:
        historical_price_data_ = yahoo_financials.get_historical_price_data(start_date='1900-01-01',
                                                                            end_date=time.strftime('20%y-%m-%d'),
                                                                            time_interval='daily')[ticker_]['prices']
    except KeyError:
        with open('stocks_with_errors.txt', 'a') as f:
            f.write(ticker_ + '\n')
        return False

    historical_prices_ = []
    for price_tick_ in historical_price_data_:
        price_tick_ = round(float(price_tick_['close']), 2)
        historical_prices_.append(price_tick_)
    return historical_prices_


def all_time_bear_trend_exists(quotes_list):
    first_200_ma = sum(quotes_list[:200]) / 200
    last_200_ma = sum(quotes_list[-200:]) / 200
    quotes_list = quotes_list[:-1]
    for j in range(50):
        for a in range(len(quotes_list) - 1):
            if a == 0:
                continue
            if a <= 20:
                quotes_before_a = quotes_list[:a + 1]
                quotes_list[a] = sum(quotes_before_a) / len(quotes_before_a)
            else:
                quotes_before_a = quotes_list[a - 19:a + 1]
                quotes_list[a] = sum(quotes_before_a) / len(quotes_before_a)
    quotes_list = quotes_list[20:-1]

    if quotes_list[-1] <= quotes_list[0] and last_200_ma <= 0.8 * first_200_ma:
        return True
    return False


def get_unavailable_tickers():
    problem_stocks_ = []
    with open('stocks_with_errors.txt', 'r', encoding='UTF-8') as f_:
        lines_ = f_.readlines()
        for line_ in lines_:
            problem_stocks_.append(line_.strip())
    return problem_stocks_


def SaveImgWithStockPlot(historical_prices_, days_to_be_visualized_=0):
    if days_to_be_visualized_ == 0 or days_to_be_visualized_ > len(historical_prices_):
        days_to_be_visualized_ = len(historical_prices_)
    x = range(days_to_be_visualized_)
    y = historical_prices_[-days_to_be_visualized_:]
    plt.plot(x, y, color='black')
    title = ''
    if days_to_be_visualized_ == 250:
        title = '–ì—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥:'
    elif days_to_be_visualized_ == 750:
        title = '–ì—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞:'
    elif days_to_be_visualized_ == len(historical_prices_):
        title = '–ì—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:'
    plt.title(title)
    plt.xticks(ticks=[])
    plot_number = str(days_to_be_visualized_) if days_to_be_visualized_ != len(historical_prices_) else '_all_time'
    plt.savefig(f'plot{plot_number}.png')
    plt.close()


def CreateImgWith3Plots(historical_prices_):
    SaveImgWithStockPlot(historical_prices_, 250)
    SaveImgWithStockPlot(historical_prices_, 750)
    SaveImgWithStockPlot(historical_prices_)

    img = Image.new('RGB', (1890, 460))
    img1 = Image.open('plot250.png')
    img2 = Image.open('plot750.png')
    img3 = Image.open('plot_all_time.png')
    img.paste(img1, (0, 0))
    img.paste(img2, (630, 0))
    img.paste(img3, (1260, 0))

    img.save("plot.png")


while True:
    try:
        if time.strftime('%H') < '07':
            time.sleep(1800)
    except Exception as err:
        pass
    try:
        time.sleep(5)

        chrome_options = webdriver.ChromeOptions()
        chrome_options.binary_location = os.environ.get('GOOGLE_CHROME_SHIM', None)

        driver = webdriver.Chrome(executable_path="chromedriver.exe")
        driver.set_page_load_timeout(60)
        driver.get("https://www.tradingview.com/markets/stocks-usa/market-movers-gainers/")
        time.sleep(4)

        xpath_for_tickers = '//a[@class="apply-common-tooltip tickerName-qN79lDF8"]'
        xpath_for_percent_changes = '//span[@class="positive-QbTXS8yz"]'
        xpath_for_current_prices = '//td[@class="cell-v9oaRE4W right-v9oaRE4W"]'

        tickers = list(map(lambda i: i.text, driver.find_elements_by_xpath(xpath_for_tickers)))
        percent_changes = list(
            map(lambda i: float(i.text.replace('%', '')), driver.find_elements_by_xpath(xpath_for_percent_changes)))
        current_prices = list(map(lambda i: i.text, driver.find_elements_by_xpath(xpath_for_current_prices)))[::9]

        driver.quit()

        tickers_percent_changes = list(zip(tickers, percent_changes, current_prices))

        for ticker, percent_change, current_price in tickers_percent_changes:

            current_price = current_price.replace('USD', ' USD')

            if percent_change < 10 or ticker in get_unavailable_tickers():
                continue

            try:
                historical_prices = GetHistoricalPrices(ticker)
            except Exception as err:
                with open('stocks_with_errors.txt', 'a', encoding='UTF-8') as f:
                    f.write(ticker + '\n')
                continue

            if not historical_prices or len(historical_prices) < 750:
                continue

            time.sleep(3)

            with open('stocks_that_are_already_sent.txt', 'r') as f:
                sent_stocks = f.readlines()
                for sent_stock in sent_stocks:
                    stocks_that_are_already_sent[sent_stock.split(' ')[0]] = sent_stock.split(' ')[1]
            stock_can_be_sent = False

            if ticker not in stocks_that_are_already_sent.keys():
                stock_can_be_sent = True
            else:
                if float(stocks_that_are_already_sent[ticker]) <= float(percent_change) - 3:
                    stock_can_be_sent = True

            if stock_can_be_sent and float(percent_change) >= 10 and all_time_bear_trend_exists(historical_prices):

                text = f'–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∞–∫—Ü–∏—è: {ticker}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{percent_change}%\n–¶–µ–Ω–∞: {current_price}'
                with open('stocks_that_are_already_sent.txt', 'a') as f:
                    f.write(f'{ticker} {percent_change}\n')

                CreateImgWith3Plots(historical_prices)
                with open('plot.png', 'rb') as f:
                    bot.send_photo(caption=text, photo=f, chat_id=MY_ID)
                    # bot.send_photo(caption=text, photo=f, chat_id=BATIN_ID)
                time.sleep(1)

            if time.strftime('%H') in '00':
                f = open('stocks_that_are_already_sent.txt', 'w')
                f.close()
                f = open('stocks_with_errors.txt', 'w')
                f.close()
    except NameError as err:
        ticker = '–ê–∫—Ü–∏—è –Ω–µ –Ω–∞—à–ª–∞—Å—å'
        bot.send_message(chat_id=MY_ID, text=ticker + ': ' + str(err))
        with open('stocks_with_errors.txt', 'a', encoding='UTF-8') as f:
            f.write(ticker + '\n')
    except Exception as err:
        try:
            bot.send_message(chat_id=MY_ID, text=ticker + ': ' + str(err))
            with open('stocks_with_errors.txt', 'r') as f:
                problem_stocks = list(map(lambda i: i.strip(), f.readlines()))
            if ticker not in problem_stocks:
                with open('stocks_with_errors.txt', 'a') as f:
                    f.write(ticker + '\n')
        except Exception as err:
            pass

    time.sleep(10)
